from django.db import modelsimport uuidfrom apps.warehouse.models.brand_model import Brandfrom master_serv.models.base_model import BaseModelfrom django.utils.translation import gettext_lazy as _class Product(BaseModel):    product_id = models.AutoField(verbose_name='Id', primary_key=True)    sku = models.CharField(verbose_name='SKU', max_length=10, blank=True, null=True)    name = models.CharField(verbose_name='Name', max_length=20, blank=False, null=False)    description = models.CharField(verbose_name='Description', max_length=100, blank=False, null=False)    small_description = models.CharField(verbose_name='Small Description', max_length=50, blank=False, null=False)    brand = models.ForeignKey(Brand, on_delete=models.DO_NOTHING, db_column='brand_id',                              verbose_name='Brand', null=False)    is_new = models.BooleanField(verbose_name='Is New', blank=False, null=False, default=True)    actual_price = models.FloatField(verbose_name='Price', blank=True, null=True, default=0)    product_code = models.CharField(verbose_name='Product Code', max_length=20, blank=True, null=True)    manufacturer_code = models.CharField(verbose_name='Manufacturer Code', max_length=20, blank=True, null=True)    WARRANTY_LEVEL_CHOICES = [        ('Marca', 'Marca'),        ('Mayorista', 'Mayorista'),    ]    warranty_level = models.CharField(verbose_name='Warranty Level', max_length=10, choices=WARRANTY_LEVEL_CHOICES,                                      blank=True, null=True)    stock = models.PositiveIntegerField(verbose_name='Stock', default=0)    image = models.ImageField(_("Image"), upload_to='product_images/', blank=True, null=True)    class Meta:        db_table = 'warehouse_product'        ordering = ['product_id']        verbose_name = 'Product'        verbose_name_plural = 'Products'    def __str__(self):        return '{}'.format(str(self.sku) + str(self.name))     def save(self, *args, **kwargs):         if not self.product_code:            self.product_code = str(uuid.uuid4())[:5]        super(Product, self).save(*args, **kwargs)