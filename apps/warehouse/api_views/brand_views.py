from django.core.exceptions import FieldErrorfrom drf_yasg.utils import swagger_auto_schemafrom rest_framework import statusfrom rest_framework.permissions import IsAuthenticatedfrom apps.warehouse.repositories.brand_repository import BrandRepositoryfrom apps.warehouse.serializers.brand_serializers import BrandSerializer, BrandDynamicResponse, BrandCreateRequest, \    BrandUpdateRequestfrom master_serv.serializers.filter_request_format_serializer import FilterRequestFormatSerializerfrom master_serv.utils.success_response import SuccessResponsefrom master_serv.views.base_view import BaseAPIViewfrom rest_framework.exceptions import APIException, NotFound, ValidationErrorclass BrandsView(BaseAPIView):    permission_classes = [IsAuthenticated]    brand_repository = BrandRepository()    """    Gel all records view    """    @swagger_auto_schema(responses={status.HTTP_200_OK: BrandSerializer(many=True)})    def get(self, request):        try:            brands = self.brand_repository.get_brands()            return SuccessResponse(data_=BrandSerializer(brands, many=True).data).send()        except:            raise APIException()    """    Get all filtered records by params and return given values    """    @swagger_auto_schema(request_body=FilterRequestFormatSerializer,                         responses={status.HTTP_200_OK: BrandDynamicResponse(many=True)})    def post(self, request):        params, values = super().get_filter_request_data(request)        brands = self.brand_repository.get_brands(*values, **params)        if type(brands) is FieldError:            raise ValidationError(brands)        else:            return SuccessResponse(data_=BrandDynamicResponse(brands, many=True, fields=values).data).send()class BrandView(BaseAPIView):    permission_classes = [IsAuthenticated]    brand_repository = BrandRepository()    """    Create a new Brand register    """    @swagger_auto_schema(request_body=BrandCreateRequest, responses={status.HTTP_200_OK: BrandSerializer()})    def post(self, request):        create_data = super().get_request_data(BrandCreateRequest(data=request.data))        try:            brand = self.brand_repository.create_brand(create_data)            return SuccessResponse(data_=BrandSerializer(brand).data).send()        except:            raise APIException(detail="Error creating brand")class BrandDetailView(BaseAPIView):    permission_classes = [IsAuthenticated]    brand_repository = BrandRepository()    """    Filter a register by id    """    @swagger_auto_schema(responses={status.HTTP_200_OK: BrandSerializer()})    def get(self, request, pk):        brand = self.brand_repository.get_brand(brand_id=pk)        if brand is None:            raise NotFound(detail="Brand not found")        else:            return SuccessResponse(data_=BrandSerializer(brand).data).send()    @swagger_auto_schema(request_body=BrandUpdateRequest, responses={status.HTTP_200_OK: BrandSerializer()})    def put(self, request, pk):        try:            update_data = super().get_request_data(serialized_request=BrandUpdateRequest(data=request.data))            brand = self.brand_repository.update_brad(brand_id=pk, brand=update_data)            if brand is None:                raise NotFound(detail="Brand not found")            else:                return SuccessResponse(data_=BrandSerializer(brand).data).send()        except:            raise APIException()    def delete(self, request, pk):        brand = self.brand_repository.get_brand(brand_id=pk)        deleted = self.brand_repository.soft_delete_brand(brand_id=pk)        if deleted is None:            raise NotFound(detail="Brand not found")        else:            return SuccessResponse(data_=BrandSerializer(brand).data).send()