from django.core.exceptions import FieldError, FieldDoesNotExistfrom django.db import models, IntegrityError, DataErrorfrom django.db.models import Qfrom master_serv.models.model_status import MODEL_STATUS_DELETED, MODEL_STATUS_UPDATEDclass BaseModelManager(models.Manager):    """    " IMPLEMENT METHODS FOR MORE ABSTRACTION    """    def get_one(self, obj_primary_key):        """        Filter a single record        """        try:            return self.get(~Q(status=MODEL_STATUS_DELETED), pk=obj_primary_key)        except models.ObjectDoesNotExist:            return None        except ValueError:            raise ValueError        except TypeError:            raise TypeError    def get_many(self, *values, **params):        try:            return self.filter(~Q(status=MODEL_STATUS_DELETED), **params).values(*values)        except FieldError as ex:            return ex    def create_one(self, **obj):        try:            return self.create(**obj)        except FieldError as ex:            return ex        except IntegrityError as ie:            return ie        except DataError as de:            return de        except TypeError as te:            return te    def update_one(self, obj_primary_key, **obj):        try:            self.filter(~Q(status=MODEL_STATUS_DELETED), pk=obj_primary_key).update(status=MODEL_STATUS_UPDATED, **obj)            try:                return self.get(pk=obj_primary_key)            except models.ObjectDoesNotExist:                return None        except FieldError as ex:            return ex        except DataError as de:            return de        except FieldDoesNotExist as fde:            return fde    def log_delete_one(self, primary_key):        try:            obj = self.get(~Q(status=MODEL_STATUS_DELETED), pk=primary_key)            obj.status = MODEL_STATUS_DELETED            obj.save()            return True        except models.ObjectDoesNotExist:            return None    def soft_delete_one(self, primary_key):        try:            obj = self.get(~Q(status=MODEL_STATUS_DELETED), pk=primary_key)            obj.delete()            return True        except models.ObjectDoesNotExist:            return None