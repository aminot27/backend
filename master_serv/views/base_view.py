from django.core.exceptions import FieldErrorfrom rest_framework.exceptions import APIException, ValidationError, NotFoundfrom rest_framework.serializers import Serializerfrom rest_framework.views import APIViewfrom master_serv.serializers.filter_request_format_serializer import FilterRequestFormatSerializerfrom master_serv.utils.success_response import SuccessResponseclass BaseAPIView(APIView):    """    Verify the data response type and send HTTP response with success or error status code    """    @staticmethod    def send_response(response_data=None):        try:            if type(response_data) is FieldError:                raise APIException(response_data)            elif response_data is None:                raise NotFound(detail=__class__.__name__ + "not found")            else:                return SuccessResponse(data_=response_data, msg_="Process executed successfully").send()        except:            raise APIException()    @staticmethod    def get_request_data(serialized_request: Serializer):        if serialized_request.is_valid():            return serialized_request.data        else:            raise ValidationError(serialized_request.errors)    @staticmethod    def get_filter_request_data(request):        filter_request = FilterRequestFormatSerializer(data=request.data)        if filter_request.is_valid():            params = filter_request.data['params']            values = filter_request.data['values']            return params, values        else:            raise ValidationError(filter_request.errors)